-- MySQL Script generated by MySQL Workbench
-- Mon Aug 26 15:22:22 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`vehicle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vehicle` ;

CREATE TABLE IF NOT EXISTS `mydb`.`vehicle` (
  `ID` VARCHAR(8) NOT NULL,
  `Type` ENUM('Private Car', 'Light Goods Vehicle', 'Motorcycle', 'Private Light Bus', 'Public Light Bus', 'Taxi', 'Private Bus', 'Public Bus', 'Invalid Carriage', 'Government Vehicle', 'Public Bus - Franchised', 'Medium Goods Vehicle', 'Heavy Goods Vehicle', 'Articulated Vehicle', 'Special Purpose Vehicle', 'Motor Tricycle') NOT NULL,
  `OwnerName` VARCHAR(45) NOT NULL,
  `OwnerID` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`street`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`street` ;

CREATE TABLE IF NOT EXISTS `mydb`.`street` (
  `NAME` VARCHAR(98) NOT NULL,
  PRIMARY KEY (`NAME`),
  UNIQUE INDEX `Street_UNIQUE` (`NAME` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`lamppost`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`lamppost` ;

CREATE TABLE IF NOT EXISTS `mydb`.`lamppost` (
  `ID` VARCHAR(6) NOT NULL,
  `X` INT NOT NULL,
  `Y` INT NOT NULL,
  `street_NAME` VARCHAR(98) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  INDEX `fk_lamppost_street1_idx` (`street_NAME` ASC) VISIBLE,
  CONSTRAINT `fk_lamppost_street1`
    FOREIGN KEY (`street_NAME`)
    REFERENCES `mydb`.`street` (`NAME`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`logcache`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`logcache` ;

CREATE TABLE IF NOT EXISTS `mydb`.`logcache` (
  `X` INT NOT NULL,
  `Y` INT NOT NULL,
  `Val` INT NOT NULL DEFAULT 0,
  `vehicle_ID` VARCHAR(8) NOT NULL,
  `street_NAME` VARCHAR(98) NOT NULL,
  INDEX `fk_logcache_vehicle_idx` (`vehicle_ID` ASC) VISIBLE,
  INDEX `fk_logcache_street1_idx` (`street_NAME` ASC) VISIBLE,
  UNIQUE INDEX `vehicle_ID_UNIQUE` (`vehicle_ID` ASC) VISIBLE,
  CONSTRAINT `fk_logcache_vehicle`
    FOREIGN KEY (`vehicle_ID`)
    REFERENCES `mydb`.`vehicle` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_logcache_street1`
    FOREIGN KEY (`street_NAME`)
    REFERENCES `mydb`.`street` (`NAME`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`streetbounds`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`streetbounds` ;

CREATE TABLE IF NOT EXISTS `mydb`.`streetbounds` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `X_start` INT NOT NULL,
  `Y_start` INT NOT NULL,
  `X_end` INT NOT NULL,
  `Y_end` INT NOT NULL,
  `street_NAME` VARCHAR(98) NOT NULL,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  INDEX `fk_streetbounds_street1_idx` (`street_NAME` ASC) VISIBLE,
  CONSTRAINT `fk_streetbounds_street1`
    FOREIGN KEY (`street_NAME`)
    REFERENCES `mydb`.`street` (`NAME`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`vehiclelog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vehiclelog` ;

CREATE TABLE IF NOT EXISTS `mydb`.`vehiclelog` (
  `vehicle_ID` VARCHAR(8) NOT NULL,
  `Log_UUID` INT NOT NULL AUTO_INCREMENT,
  `X` INT NOT NULL,
  `Y` INT NOT NULL,
  `Datetime` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
  `street_NAME` VARCHAR(98) NOT NULL,
  INDEX `fk_vehiclelog_vehicle1_idx` (`vehicle_ID` ASC) VISIBLE,
  UNIQUE INDEX `Log_UUID_UNIQUE` (`Log_UUID` ASC) VISIBLE,
  PRIMARY KEY (`Log_UUID`),
  INDEX `fk_vehiclelog_street1_idx` (`street_NAME` ASC) VISIBLE,
  CONSTRAINT `fk_vehiclelog_vehicle1`
    FOREIGN KEY (`vehicle_ID`)
    REFERENCES `mydb`.`vehicle` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vehiclelog_street1`
    FOREIGN KEY (`street_NAME`)
    REFERENCES `mydb`.`street` (`NAME`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`vehiclewarning`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vehiclewarning` ;

CREATE TABLE IF NOT EXISTS `mydb`.`vehiclewarning` (
  `vehicle_ID` VARCHAR(8) NOT NULL,
  `Datetime` DATETIME NOT NULL DEFAULT current_timestamp(),
  `Reason` VARCHAR(45) NOT NULL DEFAULT 'AUTOMATIC',
  `ID` INT NOT NULL AUTO_INCREMENT,
  INDEX `fk_vehiclewarning_vehicle1_idx` (`vehicle_ID` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_vehiclewarning_vehicle1`
    FOREIGN KEY (`vehicle_ID`)
    REFERENCES `mydb`.`vehicle` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`vehiclelog_anchor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vehiclelog_anchor` ;

CREATE TABLE IF NOT EXISTS `mydb`.`vehiclelog_anchor` (
  `vehiclelog_Log_UUID` INT NOT NULL,
  `lamppost_ID` VARCHAR(6) NOT NULL,
  PRIMARY KEY (`vehiclelog_Log_UUID`, `lamppost_ID`),
  INDEX `fk_vehiclelog_anchor_lamppost1_idx` (`lamppost_ID` ASC) VISIBLE,
  CONSTRAINT `fk_vehiclelog_anchor_vehiclelog1`
    FOREIGN KEY (`vehiclelog_Log_UUID`)
    REFERENCES `mydb`.`vehiclelog` (`Log_UUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vehiclelog_anchor_lamppost1`
    FOREIGN KEY (`lamppost_ID`)
    REFERENCES `mydb`.`lamppost` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`reservation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`reservation` ;

CREATE TABLE IF NOT EXISTS `mydb`.`reservation` (
  `RES_UUID` INT NOT NULL AUTO_INCREMENT,
  `Beg_Datetime` DATETIME NOT NULL,
  `Duration` DECIMAL(3,1) NOT NULL COMMENT 'Unit is hours.',
  `X` INT NOT NULL,
  `Y` INT NOT NULL,
  `street_NAME` VARCHAR(98) NOT NULL,
  `vehicle_ID` VARCHAR(8) NOT NULL,
  `Status` ENUM('Active', 'Waiting', 'Cancelled', 'Expired', 'Completed', 'Occupied') NOT NULL DEFAULT 'Waiting',
  PRIMARY KEY (`RES_UUID`, `street_NAME`, `vehicle_ID`),
  UNIQUE INDEX `RES_UUID_UNIQUE` (`RES_UUID` ASC) VISIBLE,
  INDEX `fk_reservations_street1_idx` (`street_NAME` ASC) VISIBLE,
  INDEX `fk_reservations_vehicle1_idx` (`vehicle_ID` ASC) VISIBLE,
  CONSTRAINT `fk_reservations_street1`
    FOREIGN KEY (`street_NAME`)
    REFERENCES `mydb`.`street` (`NAME`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reservations_vehicle1`
    FOREIGN KEY (`vehicle_ID`)
    REFERENCES `mydb`.`vehicle` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`reservationSettings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`reservationSettings` ;

CREATE TABLE IF NOT EXISTS `mydb`.`reservationSettings` (
  `idres_Set` INT NOT NULL AUTO_INCREMENT,
  `Leeway` INT NOT NULL DEFAULT 5,
  `ResSensitivity` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idres_Set`),
  UNIQUE INDEX `idRes_Leeway_UNIQUE` (`idres_Set` ASC) VISIBLE)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- procedure vehiclelog_insert
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`vehiclelog_insert`;

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `vehiclelog_insert` (
IN VehicleID VARCHAR(8),
IN X INT,
IN Y INT,
IN Anchors VARCHAR(255)
#Anchor Format : "A", "B", "C"
)
BEGIN
    DECLARE Street VARCHAR(98);
    DECLARE TargetAnchor VARCHAR(6);
    DECLARE UUID INT;
	SET TargetAnchor = SUBSTRING_INDEX(Anchors, ",", 1);
    SELECT street_name from lamppost where ID = TargetAnchor INTO Street; 
    
    INSERT INTO vehiclelog(vehicle_ID, X, Y, street_NAME) VALUES (VehicleID, X, Y, Street);
    SET UUID = LAST_INSERT_ID();
    CALL insertAnchors(UUID, Anchors);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertAnchors
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`insertAnchors`;

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `insertAnchors` (
IN UUID INT,
IN _list VARCHAR(255)
)
BEGIN

DECLARE _next TEXT DEFAULT NULL;
DECLARE _nextlen INT DEFAULT NULL;
DECLARE _value TEXT DEFAULT NULL;

iterator:
LOOP
  -- exit the loop if the list seems empty or was null;
  -- this extra caution is necessary to avoid an endless loop in the proc.
  IF CHAR_LENGTH(TRIM(_list)) = 0 OR _list IS NULL THEN
    LEAVE iterator;
  END IF;
 
  -- capture the next value from the list
  SET _next = SUBSTRING_INDEX(_list,',',1);

  -- save the length of the captured value; we will need to remove this
  -- many characters + 1 from the beginning of the string 
  -- before the next iteration
  SET _nextlen = CHAR_LENGTH(_next);

  -- trim the value of leading and trailing spaces, in case of sloppy CSV strings
  SET _value = TRIM(_next);

  -- insert the extracted value into the target table
  INSERT INTO vehiclelog_anchor (vehiclelog_Log_UUID, lamppost_ID) VALUES (UUID, _value);

  -- rewrite the original string using the `INSERT()` string function,
  -- args are original string, start position, how many characters to remove, 
  -- and what to "insert" in their place (in this case, we "insert"
  -- an empty string, which removes _nextlen + 1 characters)
  SET _list = INSERT(_list,1,_nextlen + 1,'');
END LOOP;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setLeeway
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`setLeeway`;

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `setLeeway` (
	IN Minutes INT
)
BEGIN
	UPDATE reservationSettings SET `Leeway` = Minutes WHERE 'idres_Set' = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getLeeway
-- -----------------------------------------------------

USE `mydb`;
DROP function IF EXISTS `mydb`.`getLeeway`;

DELIMITER $$
USE `mydb`$$
CREATE FUNCTION `getLeeway` () RETURNS INT DETERMINISTIC
BEGIN
	DECLARE TMP INT;
	SELECT `Leeway` FROM reservationSettings WHERE `idres_Set` = 1 INTO TMP;
    RETURN TMP;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getCacheCount
-- -----------------------------------------------------

USE `mydb`;
DROP function IF EXISTS `mydb`.`getCacheCount`;

DELIMITER $$
USE `mydb`$$
CREATE FUNCTION `getCacheCount` (ID VARCHAR(8)) RETURNS INT DETERMINISTIC
BEGIN
DECLARE COUNT INT;
SET COUNT =  (SELECT `Val` FROM logcache WHERE `vehicle_ID` = ID);
RETURN COUNT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function getSens
-- -----------------------------------------------------

USE `mydb`;
DROP function IF EXISTS `mydb`.`getSens`;

DELIMITER $$
USE `mydb`$$
CREATE FUNCTION `getSens` () RETURNS INT DETERMINISTIC
BEGIN
	DECLARE TMP INT;
	SELECT `ResSensitivity` FROM reservationSettings WHERE `idres_Set` = 1 INTO TMP;
    RETURN TMP;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setSens
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`setSens`;

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `setSens` (
	IN Sens INT
)
BEGIN
	UPDATE reservationSettings SET `ResSensitivity` = Sens WHERE `idres_Set` = 1;
END$$

DELIMITER ;
USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`vehiclelog_!MOVE_CACHE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`vehiclelog_!MOVE_CACHE` AFTER INSERT ON `vehiclelog` FOR EACH ROW
-- //Only runs when not: Matches Location & Active Reservation || Matches Location & In Leeway (Activates Reservation). 
-- Changed to always run because it would be stupid not to use this.
BEGIN
    DECLARE TMP INT;
    DECLARE cache_count INT;

    -- Select the value into TMP
SET TMP = getLeeway();
    -- Check if the condition is met
        SELECT COUNT(*) INTO cache_count
        FROM logcache
        WHERE vehicle_ID = NEW.vehicle_ID;
        IF cache_count > 0 THEN
            IF (SELECT street_NAME FROM logcache WHERE vehicle_ID = NEW.vehicle_ID) <> NEW.street_NAME 
            OR (SELECT X FROM logcache WHERE vehicle_ID = NEW.vehicle_ID) <> NEW.X 
            OR (SELECT Y FROM logcache WHERE vehicle_ID = NEW.vehicle_ID) <> NEW.Y THEN
                UPDATE logcache
                SET X = NEW.X,
                    Y = NEW.Y,
                    street_NAME = NEW.street_NAME,
                    Val = 0
                WHERE vehicle_ID = NEW.vehicle_ID;
            ELSE
                UPDATE logcache
                SET Val = Val + 1
                WHERE vehicle_ID = NEW.vehicle_ID;
            END IF;
        ELSE
            INSERT INTO logcache (X, Y, street_NAME, Val, vehicle_ID)
            VALUES (NEW.X, NEW.Y, NEW.street_NAME, 0, NEW.vehicle_ID);
        END IF;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`vehiclelog_BEGINS_RESERVATION` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`vehiclelog_BEGINS_RESERVATION` 
AFTER INSERT ON `vehiclelog` 
FOR EACH ROW
-- The checks are for: [Correct Name, Correct Location, Correct Time, Has Stopped] in that order.
BEGIN
	DECLARE TMP INT;
    SET TMP = getLeeway();
    UPDATE `reservation` 
    SET `Status` = 'Active'
    WHERE `Status` = 'Waiting'
        AND `vehicle_ID` = NEW.vehicle_ID
        AND `street_NAME` = NEW.street_NAME
        AND `X` >= NEW.X - 1
        AND `X` <= NEW.X + 1
        AND `Y` > NEW.Y - 1
        AND `Y` <= NEW.Y + 1
        AND `Beg_Datetime` > ADDDATE(CURRENT_TIMESTAMP, INTERVAL -TMP MINUTE)
        AND `Beg_Datetime` < ADDDATE(CURRENT_TIMESTAMP, INTERVAL TMP MINUTE)
        AND getCacheCount(`vehicle_ID`) > getSens();
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`vehiclelog_ENDS_RESERVATION` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`vehiclelog_ENDS_RESERVATION` AFTER INSERT ON `vehiclelog` FOR EACH ROW
-- Overstays (Handled by event). This handles early/on-time. There is no limit to how early you can leave, although there is wiggle room for if the vehicle deviate from that location for a single cycle.
BEGIN
DECLARE TMP INT;
SET TMP = getLeeway();
	UPDATE `reservation` 
SET 
    `Status` = 'Completed'
WHERE
    `Status` = 'Active'
        AND `vehicle_ID` = NEW.vehicle_ID
        AND (`street_NAME` != NEW.street_NAME
        OR `X` < NEW.X - 1 OR `X` > NEW.X + 1
        OR `Y` < NEW.Y - 1
        OR `Y` > NEW.Y + 1) 
        AND getCacheCount(`vehicle_ID`) <= 1;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`vehiclelog_AFTER_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`vehiclelog_AFTER_DELETE` AFTER DELETE ON `vehiclelog` FOR EACH ROW
BEGIN
	DELETE FROM logcache WHERE vehicle_ID = OLD.vehicle_ID;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS server;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'server' IDENTIFIED BY 'chifatserver';

GRANT SELECT ON TABLE `mydb`.`lamppost` TO 'server';
GRANT SELECT ON TABLE `mydb`.`logcache` TO 'server';
GRANT SELECT ON TABLE `mydb`.`streetbounds` TO 'server';
GRANT SELECT ON TABLE `mydb`.`vehicle` TO 'server';
GRANT INSERT, SELECT ON TABLE `mydb`.`vehiclelog` TO 'server';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mydb`.`vehicle`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`vehicle` (`ID`, `Type`, `OwnerName`, `OwnerID`) VALUES ('00000000', 'Taxi', 'you', 'you');
INSERT INTO `mydb`.`vehicle` (`ID`, `Type`, `OwnerName`, `OwnerID`) VALUES ('11111111', 'Public Bus', 'me', 'me');

COMMIT;

USE `mydb`;
-- Query by OwnerName/Street/Vehicle_ID
CREATE OR REPLACE VIEW `CheckReservations` AS SELECT reservation.*, vehicle.OwnerName, vehicle.`Type` FROM reservation LEFT JOIN vehicle ON reservation.`vehicle_ID`= vehicle.`ID`;

-- -----------------------------------------------------
-- Data for table `mydb`.`street`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`street` (`NAME`) VALUES ('TEST');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`reservationSettings`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`reservationSettings` (`idres_Set`, `Leeway`, `ResSensitivity`) VALUES (1, 5, 1);

COMMIT;

